// Generated NFT Code for {{id}}
use anchor_lang::prelude::*;
use anchor_spl::{
    associated_token::AssociatedToken,
    token::{Mint, Token, TokenAccount},
};
use mpl_token_metadata::instruction::create_metadata_accounts_v3;

pub fn process(ctx: Context<MintNFT>) -> Result<()> {
    // Create Metadata
    let metadata_ix = create_metadata_accounts_v3(
        ctx.accounts.metadata_program.key(),
        ctx.accounts.metadata.key(),
        ctx.accounts.mint.key(),
        ctx.accounts.payer.key(),
        ctx.accounts.payer.key(),
        ctx.accounts.payer.key(),
        "{{data.name}}".to_string(),
        "{{data.symbol}}".to_string(),
        "{{data.uri}}".to_string(),
        Some(vec![
            Creator {
                address: ctx.accounts.payer.key(),
                verified: true,
                share: {{data.royalties}},
            }
        ]),
        {{data.royalties}} * 100, // Basis points
        true, // Is mutable
        false, // Collection
        None, // Collection details
        None, // Uses
    );

    invoke(
        &metadata_ix,
        &[
            ctx.accounts.metadata.to_account_info(),
            ctx.accounts.mint.to_account_info(),
            ctx.accounts.payer.to_account_info(),
            ctx.accounts.rent.to_account_info(),
        ],
    )?;

    msg!("Minted NFT to {}", ctx.accounts.token_account.key());
    Ok(())
}

#[derive(Accounts)]
pub struct MintNFT<'info> {
    #[account(
        init,
        payer = payer,
        associated_token::mint = mint,
        associated_token::authority = payer
    )]
    pub token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub mint: Account<'info, Mint>,
    #[account(mut)]
    pub payer: Signer<'info>,
    /// CHECK: Metadata account validated in instruction
    #[account(mut)]
    pub metadata: UncheckedAccount<'info>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub metadata_program: Program<'info, Metadata>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}
