// Generated Mint Code for {{id}}
use anchor_lang::prelude::*;
use anchor_spl::token::{Mint, Token, TokenAccount};

pub fn process(ctx: Context<MintTokens>) -> Result<()> {
    let amount = {{data.amount}} * 10u64.pow(ctx.accounts.mint.decimals as u32);
    
    anchor_spl::token::mint_to(
        CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            anchor_spl::token::MintTo {
                mint: ctx.accounts.mint.to_account_info(),
                to: ctx.accounts.token_account.to_account_info(),
                authority: ctx.accounts.authority.to_account_info(),
            },
        ),
        amount,
    )?;

    msg!("Minted {} tokens to {}", {{data.amount}}, ctx.accounts.token_account.key());
    Ok(())
}

#[derive(Accounts)]
pub struct MintTokens<'info> {
    #[account(mut)]
    pub mint: Account<'info, Mint>,
    #[account(
        mut,
        associated_token::mint = mint,
        associated_token::authority = destination
    )]
    pub token_account: Account<'info, TokenAccount>,
    pub authority: Signer<'info>,
    #[account(mut)]
    pub destination: SystemAccount<'info>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub system_program: Program<'info, System>,
}

// Client Example
export const mintTokens_{{id}} = async (
    mint: PublicKey,
    destination: PublicKey,
    amount: number,
    authority: Keypair
) => {
    const tx = await program.methods
        .mintTokens(new BN(amount))
        .accounts({
            mint,
            tokenAccount: getAssociatedTokenAddressSync(mint, destination),
            destination,
            authority: authority.publicKey,
        })
        .signers([authority])
        .rpc();
    return tx;
};
