// Generated Account Code for {{id}}
use anchor_lang::prelude::*;
use anchor_spl::associated_token::AssociatedToken;

pub fn process(ctx: Context<CreateAccount>, lamports: u64) -> Result<()> {
    {%#if data.isTokenAccount %}
    // Create Associated Token Account
    let ata = AssociatedToken::create(
        ctx.accounts.payer.to_account_info(),
        ctx.accounts.mint.to_account_info(),
        ctx.accounts.payer.to_account_info(),
        ctx.accounts.system_program.to_account_info(),
    )?;
    {%/if%}

    // Initialize System Account
    **ctx.accounts.new_account.try_borrow_mut_lamports()? = lamports;
    
    msg!("Created account with {} SOL", lamports as f64 / 1_000_000_000.0);
    Ok(())
}

#[derive(Accounts)]
pub struct CreateAccount<'info> {
    #[account(mut)]
    pub payer: Signer<'info>,
    {%#if data.isTokenAccount%}
    pub mint: Account<'info, Mint>,
    {%/if%}
    #[account(
        init,
        payer = payer,
        space = 8 + 8,
        {%#unless data.isTokenAccount%}
        owner = system_program.key()
        {%/unless%}
    )]
    pub new_account: Account<'info, SystemAccount>,
    pub system_program: Program<'info, System>,
    {%#if data.isTokenAccount%}
    pub associated_token_program: Program<'info, AssociatedToken>,
    {%/if%}
}
