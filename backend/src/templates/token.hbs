// Generated Token Code for {{id}}
use anchor_lang::prelude::*;
use anchor_spl::token::{Mint, Token};

pub fn process(ctx: Context<CreateToken>) -> Result<()> {
    ctx.accounts.mint.decimals = {{data.decimals}};
    msg!(
        "Created token {{data.name}} ({{data.symbol}}) with {{data.decimals}} decimals",
    );
    Ok(())
}

#[derive(Accounts)]
pub struct CreateToken<'info> {
    #[account(
        init,
        payer = payer,
        mint::decimals = {{data.decimals}},
        mint::authority = payer
    )]
    pub mint: Account<'info, Mint>,
    #[account(mut)]
    pub payer: Signer<'info>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

// Client Code
export const createToken_{{id}} = async (
    connection: Connection,
    payer: Keypair,
    decimals: number
) => {
    const mintKeypair = Keypair.generate();
    const tx = await program.methods
        .createToken(decimals)
        .accounts({
            mint: mintKeypair.publicKey,
            payer: payer.publicKey,
        })
        .signers([payer, mintKeypair])
        .rpc();
    return { tx, mint: mintKeypair.publicKey };
};
